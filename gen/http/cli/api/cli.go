// Code generated by goa v3.10.1, DO NOT EDIT.
//
// api HTTP client CLI support package
//
// Command:
// $ goa gen auth/design

package cli

import (
	authenticatec "auth/gen/http/authenticate/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `authenticate authenticate
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` authenticate authenticate --body '{
      "X-Provider": 1,
      "login": "login1",
      "password": "password",
      "privacyAccepted": true,
      "uuid": "eFd1CEdC-93Fc-38db-dAae-e029817F045F"
   }' --x-provider 197093754279694144` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		authenticateFlags = flag.NewFlagSet("authenticate", flag.ContinueOnError)

		authenticateAuthenticateFlags         = flag.NewFlagSet("authenticate", flag.ExitOnError)
		authenticateAuthenticateBodyFlag      = authenticateAuthenticateFlags.String("body", "REQUIRED", "")
		authenticateAuthenticateXProviderFlag = authenticateAuthenticateFlags.String("x-provider", "", "")
	)
	authenticateFlags.Usage = authenticateUsage
	authenticateAuthenticateFlags.Usage = authenticateAuthenticateUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "authenticate":
			svcf = authenticateFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "authenticate":
			switch epn {
			case "authenticate":
				epf = authenticateAuthenticateFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "authenticate":
			c := authenticatec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "authenticate":
				endpoint = c.Authenticate()
				data, err = authenticatec.BuildAuthenticatePayload(*authenticateAuthenticateBodyFlag, *authenticateAuthenticateXProviderFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// authenticateUsage displays the usage of the authenticate command and its
// subcommands.
func authenticateUsage() {
	fmt.Fprintf(os.Stderr, `auth service
Usage:
    %[1]s [globalflags] authenticate COMMAND [flags]

COMMAND:
    authenticate: Authenticate implements authenticate.

Additional help:
    %[1]s authenticate COMMAND --help
`, os.Args[0])
}
func authenticateAuthenticateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] authenticate authenticate -body JSON -x-provider INT

Authenticate implements authenticate.
    -body JSON: 
    -x-provider INT: 

Example:
    %[1]s authenticate authenticate --body '{
      "X-Provider": 1,
      "login": "login1",
      "password": "password",
      "privacyAccepted": true,
      "uuid": "eFd1CEdC-93Fc-38db-dAae-e029817F045F"
   }' --x-provider 197093754279694144
`, os.Args[0])
}
