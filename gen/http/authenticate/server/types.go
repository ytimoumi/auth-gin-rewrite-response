// Code generated by goa v3.10.1, DO NOT EDIT.
//
// authenticate HTTP server types
//
// Command:
// $ goa gen auth/design

package server

import (
	authenticate "auth/gen/authenticate"

	goa "goa.design/goa/v3/pkg"
)

// AuthenticateRequestBody is the type of the "authenticate" service
// "authenticate" endpoint HTTP request body.
type AuthenticateRequestBody struct {
	// A valid login name
	Login *string `form:"login,omitempty" json:"login,omitempty" xml:"login,omitempty"`
	// A valid password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// privacyAccepted
	PrivacyAccepted *bool `form:"privacyAccepted,omitempty" json:"privacyAccepted,omitempty" xml:"privacyAccepted,omitempty"`
	// uuid
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// AuthenticateResponseBody is the type of the "authenticate" service
// "authenticate" endpoint HTTP response body.
type AuthenticateResponseBody struct {
	// login
	Login string `form:"login" json:"login" xml:"login"`
	// refreshToken
	RefreshToken string `form:"refreshToken" json:"refreshToken" xml:"refreshToken"`
	// providerToken
	ProviderToken *string `form:"providerToken,omitempty" json:"providerToken,omitempty" xml:"providerToken,omitempty"`
	// subscriber
	Subscriber int `form:"subscriber" json:"subscriber" xml:"subscriber"`
	// people
	People *string `form:"people,omitempty" json:"people,omitempty" xml:"people,omitempty"`
	// locale
	Locale *string `form:"locale,omitempty" json:"locale,omitempty" xml:"locale,omitempty"`
}

// AuthenticateBadrequestResponseBody is the type of the "authenticate" service
// "authenticate" endpoint HTTP response body for the "badrequest" error.
type AuthenticateBadrequestResponseBody struct {
	// message status
	Status int `form:"status" json:"status" xml:"status"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
	// Name of the error
	Exception string `form:"exception" json:"exception" xml:"exception"`
}

// AuthenticateUnauthorizedResponseBody is the type of the "authenticate"
// service "authenticate" endpoint HTTP response body for the "unauthorized"
// error.
type AuthenticateUnauthorizedResponseBody struct {
	// message status
	Status int `form:"status" json:"status" xml:"status"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
	// Name of the error
	Exception string `form:"exception" json:"exception" xml:"exception"`
}

// AuthenticateInternalservererrorResponseBody is the type of the
// "authenticate" service "authenticate" endpoint HTTP response body for the
// "internalservererror" error.
type AuthenticateInternalservererrorResponseBody struct {
	// message status
	Status int `form:"status" json:"status" xml:"status"`
	// message
	Message string `form:"message" json:"message" xml:"message"`
	// Name of the error
	Exception string `form:"exception" json:"exception" xml:"exception"`
}

// NewAuthenticateResponseBody builds the HTTP response body from the result of
// the "authenticate" endpoint of the "authenticate" service.
func NewAuthenticateResponseBody(res *authenticate.OutputAuth) *AuthenticateResponseBody {
	body := &AuthenticateResponseBody{
		Login:         res.Login,
		RefreshToken:  res.RefreshToken,
		ProviderToken: res.ProviderToken,
		Subscriber:    res.Subscriber,
		People:        res.People,
		Locale:        res.Locale,
	}
	return body
}

// NewAuthenticateBadrequestResponseBody builds the HTTP response body from the
// result of the "authenticate" endpoint of the "authenticate" service.
func NewAuthenticateBadrequestResponseBody(res *authenticate.TextMessage) *AuthenticateBadrequestResponseBody {
	body := &AuthenticateBadrequestResponseBody{
		Status:    res.Status,
		Message:   res.Message,
		Exception: res.Exception,
	}
	return body
}

// NewAuthenticateUnauthorizedResponseBody builds the HTTP response body from
// the result of the "authenticate" endpoint of the "authenticate" service.
func NewAuthenticateUnauthorizedResponseBody(res *authenticate.TextMessage) *AuthenticateUnauthorizedResponseBody {
	body := &AuthenticateUnauthorizedResponseBody{
		Status:    res.Status,
		Message:   res.Message,
		Exception: res.Exception,
	}
	return body
}

// NewAuthenticateInternalservererrorResponseBody builds the HTTP response body
// from the result of the "authenticate" endpoint of the "authenticate" service.
func NewAuthenticateInternalservererrorResponseBody(res *authenticate.TextMessage) *AuthenticateInternalservererrorResponseBody {
	body := &AuthenticateInternalservererrorResponseBody{
		Status:    res.Status,
		Message:   res.Message,
		Exception: res.Exception,
	}
	return body
}

// NewAuthenticateInputAuth builds a authenticate service authenticate endpoint
// payload.
func NewAuthenticateInputAuth(body *AuthenticateRequestBody, xProvider *int) *authenticate.InputAuth {
	v := &authenticate.InputAuth{
		Login:           *body.Login,
		Password:        *body.Password,
		PrivacyAccepted: body.PrivacyAccepted,
		UUID:            body.UUID,
	}
	v.XProvider = xProvider

	return v
}

// ValidateAuthenticateRequestBody runs the validations defined on
// AuthenticateRequestBody
func ValidateAuthenticateRequestBody(body *AuthenticateRequestBody) (err error) {
	if body.Login == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("login", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}
