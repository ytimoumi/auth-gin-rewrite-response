// Code generated by goa v3.10.1, DO NOT EDIT.
//
// authenticate HTTP client CLI support package
//
// Command:
// $ goa gen auth/design

package client

import (
	authenticate "auth/gen/authenticate"
	"encoding/json"
	"fmt"
	"strconv"
)

// BuildAuthenticatePayload builds the payload for the authenticate
// authenticate endpoint from CLI flags.
func BuildAuthenticatePayload(authenticateAuthenticateBody string, authenticateAuthenticateXProvider string) (*authenticate.InputAuth, error) {
	var err error
	var body AuthenticateRequestBody
	{
		err = json.Unmarshal([]byte(authenticateAuthenticateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"X-Provider\": 1,\n      \"login\": \"login1\",\n      \"password\": \"password\",\n      \"privacyAccepted\": true,\n      \"uuid\": \"eFd1CEdC-93Fc-38db-dAae-e029817F045F\"\n   }'")
		}
	}
	var xProvider *int
	{
		if authenticateAuthenticateXProvider != "" {
			var v int64
			v, err = strconv.ParseInt(authenticateAuthenticateXProvider, 10, strconv.IntSize)
			val := int(v)
			xProvider = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for xProvider, must be INT")
			}
		}
	}
	v := &authenticate.InputAuth{
		Login:           body.Login,
		Password:        body.Password,
		PrivacyAccepted: body.PrivacyAccepted,
		UUID:            body.UUID,
	}
	v.XProvider = xProvider

	return v, nil
}
